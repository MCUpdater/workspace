ext.sharedVersion = new Version(major: 4, minor: 0, buildNum: 0)
ext.downloadLibVersion = new Version(major: 1, minor: 13)
ext.bootstrapVersion = new Version(major: 1, minor: 3)
ext.fastpackVersion = new Version(major: 1, minor: 7, buildNum: 10)

class Version {
    int major, minor, buildNum

    String toString() {
        if (buildNum != 0) {
            "$major.$minor.$buildNum"
        } else {
            "$major.$minor"
        }
    }
}

task gatherArtifacts {
    doLast {
        File assembledDir = mkdir("$buildDir/Artifacts")
        subprojects.each { project ->
            project.tasks.withType(Jar).each { archiveTask ->
                copy {
                    from archiveTask.archiveFile
                    into assembledDir
                }
            }
        }
    }
}

task copyDeps {
    doLast {
        subprojects {subprj->
            def allDeps = []
            def sources = ['runtime', 'compile', 'providedRuntime', 'providedCompile']
            subprj.configurations.asMap.each {k, v->
                if (k in sources) {
                    allDeps.addAll v.allDependencies
                }
            }
            copy{
                from allDeps.collect { dep->
                    if (!(dep instanceof ProjectDependency)) {//exclude project deps
                        //noinspection GroovyAssignabilityCheck
                        def files =  subprj.configurations.compile.files (dep)
                        files.collect { f->
                            f.path
                        }
                    } else {
                        []
                    }
                }
                into "${rootProject.projectDir}/copy"
            }
        }
    }
}