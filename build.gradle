import org.apache.tools.ant.filters.*

def sharedVersion = new Version(major: 3, minor: 3, buildNum: 16)

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.ajoberstar:grgit:0.4.0' }
}

subprojects {
	apply plugin: 'java'
	group = 'org.mcupdater'

	repositories {
		mavenCentral()
		maven {
			name = "mojang"
			url = "https://libraries.minecraft.net/"
		}
	}
}

import org.ajoberstar.grgit.*

task cloneAPI() {
	def destination = file("MCU-API")
	def uri = "https://github.com/MCUpdater/MCU-API.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneDownloadLib() {
	def destination = file("MCU-DownloadLib")
	def uri = "https://github.com/MCUpdater/MCU-DownloadLib.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneBootstrap() {
	def destination = file("MCU-Bootstrap")
	def uri = "https://github.com/MCUpdater/MCU-Bootstrap.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneGUISwing() {
	def destination = file("GUI-Swing")
	def uri = "https://github.com/MCUpdater/GUI-Swing.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneGUIMinimal() {
	def destination = file("GUI-Minimal")
	def uri = "https://github.com/MCUpdater/GUI-Minimal.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneFastPack() {
	def destination = file("FastPack")
	def uri = "https://github.com/MCUpdater/FastPack.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task clonePackBuilder() {
	def destination = file("PackBuilder")
	def uri = "https://github.com/MCUpdater/PackBuilder.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneLauncher() {
	def destination = file("MCU-Launcher")
	def uri = "https://github.com/MCUpdater/MCU-Launcher.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneServer() {
	def destination = file("MCU-Server")
	def uri = "https://github.com/MCUpdater/MCU-Server.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task cloneQuickServer() {
	def destination = file("QuickServer")
	def uri = "https://github.com/MCUpdater/QuickServer.git"
	if (!destination.exists()) {
		Grgit.clone(dir: destination, uri: uri)
	}
}

task setupWorkspace << {
	println 'Workspace ready'
}

setupWorkspace.dependsOn {
	tasks.findAll { task -> task.name.startsWith('clone') }
}

task gatherArtifacts << {
	File assembledDir = mkdir("$buildDir/Artifacts")
	subprojects.each { project ->
		project.tasks.withType(Jar).each { archiveTask ->
			copy {
				from archiveTask.archivePath
				into assembledDir
			}
		}
	}
}

task copyDeps << {
	subprojects {subprj->
		def allDeps = []
		def sources = ['runtime', 'compile', 'providedRuntime', 'providedCompile']
		subprj.configurations.asMap.each {k, v->
			if (k in sources) {
				allDeps.addAll v.allDependencies
			}
		}
		copy{
			from allDeps.collect { dep->
				if (!(dep instanceof ProjectDependency)) {//exclude project deps
					//noinspection GroovyAssignabilityCheck
					def files =  subprj.configurations.compile.files (dep)
					files.collect { f->
						f.path
					}
				} else {
					[]
				}
			}
			into "${rootProject.projectDir}/copy"
		}
	}
}

task build(dependsOn: setupWorkspace) {}

class Version {
	int major, minor, buildNum

	String toString() {
		if (buildNum != 0) {
			"$major.$minor.$buildNum"
		} else {
			"$major.$minor"
		}
	}
}

project(':MCU-DownloadLib') {
	version = new Version(major: 1, minor: 6)
	sourceCompatibility = 1.6

	afterEvaluate {
		processResources {
			include '**/*.properties'
			filter(ReplaceTokens, tokens: [verMajor: Integer.toString(version.major), verMinor: Integer.toString(version.minor), verBuild: Integer.toString(version.buildNum)])
			println("Version " + version)
		}
	}

	dependencies {
		compile 'commons-codec:commons-codec:1.9'
		compile 'commons-io:commons-io:2.4'
		compile 'org.tukaani:xz:1.4'
	}
}

project(':MCU-API') {
	version = sharedVersion
	sourceCompatibility = 1.7

	afterEvaluate {
		processResources {
			from(sourceSets*.resources.srcDirs) {
				include '**/*.properties'
				filter(ReplaceTokens, tokens: [verMajor: Integer.toString(version.major), verMinor: Integer.toString(version.minor), verBuild: Integer.toString(version.buildNum)])
			}
			from(sourceSets*.resources.srcDirs) {
				exclude '**/*.properties'
			}
		}
	}

	dependencies {
		compile project(':MCU-DownloadLib')
		//compile project(':MCU-Yggdrasil')
		compile 'commons-codec:commons-codec:1.9'
		compile 'commons-io:commons-io:2.4'
		compile 'org.apache.commons:commons-lang3:3.2.1'
		compile 'com.google.code.gson:gson:2.2.4'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0-rc2'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0-rc2'
	}
}

project(':MCU-Bootstrap') {
	version = '1.2'
	sourceCompatibility = 1.6

	dependencies {
		compile project(':MCU-DownloadLib')
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
		compile 'org.apache.commons:commons-lang3:3.2.1'
	}

	processResources {
		from(sourceSets.main.resources.srcDirs) {
			include '**/config.properties'
			filter(ReplaceTokens, tokens: [bootstrapURL: bootstrapURL, distribution: distribution, defaultPack: defaultPack])
		}
		from(sourceSets.main.resources.srcDirs) {
			exclude '**/config.properties'
		}
	}

	jar {
		archiveName = 'MCU-Bootstrap.jar'
		from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		manifest {
			attributes "Main-Class": 'org.mcupdater.BootstrapForm'
		}
	}
}

project(':GUI-Swing') {
	version = sharedVersion
	sourceCompatibility = 1.7

	afterEvaluate {
		processResources {
			from(sourceSets*.resources.srcDirs) {
				include '**/*.properties' filter(ReplaceTokens, tokens: [verMajor: Integer.toString(version.major), verMinor: Integer.toString(version.minor), verBuild: Integer.toString(version.buildNum)])
			}
			from(sourceSets*.resources.srcDirs) { exclude '**/*.properties' }
		}
	}
	dependencies {
		compile project(':MCU-API')
		compile project(':MCU-DownloadLib')
		compile 'com.mojang:authlib:1.5.13'
		compile 'org.apache.commons:commons-lang3:3.2.1'
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
		compile 'commons-io:commons-io:2.4'
		compile 'com.google.code.gson:gson:2.2.4'
		compile 'org.swinglabs.swingx:swingx-all:1.6.5'
		compile 'com.google.guava:guava:15.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0-rc2'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0-rc2'
		compile files("${System.properties['java.home']}/lib/jfxrt.jar")
	}

	jar {
		baseName = "MCU"
	}
}

project(':GUI-Minimal') {
	version = sharedVersion
	sourceCompatibility = 1.7

	afterEvaluate {
		processResources {
			from(sourceSets*.resources.srcDirs) {
				include '**/*.properties' filter(ReplaceTokens, tokens: [verMajor: Integer.toString(version.major), verMinor: Integer.toString(version.minor), verBuild: Integer.toString(version.buildNum)])
			}
			from(sourceSets*.resources.srcDirs) { exclude '**/*.properties' }
		}
	}
	dependencies {
		compile project(':MCU-API')
		compile project(':MCU-DownloadLib')
		compile 'com.mojang:authlib:1.5.13'
		compile 'org.apache.commons:commons-lang3:3.2.1'
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
		compile 'commons-io:commons-io:2.4'
		compile 'com.google.code.gson:gson:2.2.4'
		compile 'com.google.guava:guava:15.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0-rc2'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0-rc2'
	}

	jar {
		baseName = 'MCU-Minimal'
	}
}

project(':PackBuilder') {
	sourceCompatibility = 1.7
	dependencies {
		compile project(':MCU-API')
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
	}
}

project(':FastPack') {
	version = new Version(major: 1, minor: 6, buildNum: 8)
	sourceCompatibility = 1.7

	dependencies {
		compile project(':MCU-API')
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
		compile 'commons-codec:commons-codec:1.9'
		compile 'org.apache.commons:commons-lang3:3.2.1'
		compile 'com.google.code.gson:gson:2.2.4'
	}

	jar {
		baseName = 'MCU-FastPack'
		from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		manifest {
			attributes "Main-Class": 'org.mcupdater.fastpack.FastPack'
		}
	}
}

project(':MCU-Launcher') {
	version = new Version(major: 1, minor: 0)
	sourceCompatibility = 1.7

	jar {
		archiveName = "MCU-Launcher.jar"
	}
}

project(':MCU-Server') {
	version = sharedVersion
	sourceCompatibility = 1.7

	dependencies {
		compile project(":MCU-API")
		compile project(":MCU-DownloadLib")
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
		compile 'commons-cli:commons-cli:1.2'
		compile 'org.apache.commons:commons-lang3:3.3.2'
		compile 'com.google.guava:guava:18.0'
        compile 'jline:jline:2.12.1'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0-rc2'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0-rc2'
	}
	jar {
		baseName = 'MCU-Server'
		from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		manifest {
			attributes "Main-Class": 'org.mcupdater.MCUServer'
		}
	}
}

project(':QuickServer') {
	version = sharedVersion
	sourceCompatibility = 1.7

	dependencies {
		compile project(":MCU-API")
		compile project(":MCU-DownloadLib")
		compile 'net.sf.jopt-simple:jopt-simple:4.6'
		compile 'commons-cli:commons-cli:1.2'
		compile 'org.apache.commons:commons-lang3:3.3.2'
		compile 'com.google.guava:guava:18.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0-rc2'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0-rc2'
	}
	jar {
		baseName = 'QuickServer'
		from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		manifest {
			attributes "Main-Class": 'org.mcupdater.QuickServer'
		}
	}
}